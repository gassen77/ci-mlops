name: CI Workflow

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      # Add swap space to avoid memory issues
      - name: Add swap space
        run: |
          sudo fallocate -l 1G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: true

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}  # Cache key based on requirements.txt
          restore-keys: |
            ${{ runner.os }}-python-

      # Install Python dependencies directly (without virtualenv)
      - name: Install Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install project dependencies
          pip install black flake8 mlflow  # Install linters, formatters, and MLflow

      # Clean up old Docker images and containers
      - name: Clean up old Docker images and containers
        run: |
          # Remove all stopped containers
          docker container prune -f
          
          # Remove all unused images (old images not referenced by any container)
          docker image prune -f --all

          # Optional: Remove dangling images (untagged images that aren't used by any container)
          docker image prune -f

      # Lint code using flake8 and allow errors without stopping the workflow
      - name: Lint code with flake8
        run: |
          flake8 . || true  # Lint all Python files, but don't stop the workflow if errors are found

      # Format code using black
      - name: Format code with black
        run: |
          black --check .  # Check if the code is formatted, will fail if not
        continue-on-error: true  # Allow the workflow to continue even if the check fails

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build --no-cache -t ghcr.io/${{ github.repository }}/my-ml-image:latest .

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Tag Docker image
      - name: Tag Docker image
        run: |
          docker tag ghcr.io/${{ github.repository }}/my-ml-image:latest ghcr.io/${{ github.repository }}/my-ml-image:latest

      # Push Docker image to GHCR (this step is commented out if you don't want to push the image yet)
      - name: Push Docker image to GHCR
        run: |
           docker push ghcr.io/${{ github.repository }}/my-ml-image:latest

      # Run Docker container
      - name: Run Docker container
        run: |
          docker run --name ml-container -d ghcr.io/${{ github.repository }}/my-ml-image:latest

      # Check if the Docker container is running
      - name: Check Docker container status
        run: |
          docker ps -a
          docker inspect ml-container  

      # Test ML project inside Docker container
      - name: Test ML project in Docker container
        run: |
    #       docker exec ml-container python /app/train.py  # Adjust path as needed

      # Optional: Upload MLflow artifacts
      - name: Upload MLflow artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mlflow-logs
          path: /app/mlruns  # Adjust path as needed, assuming MLflow logs are stored here

     # Run MLflow UI (for local viewing)
      - name: Run MLflow UI
        run: |
          mlflow ui --host 0.0.0.0 --port 5000
          
      # Optional: Cleanup Docker image if you want to save space
      - name: Cleanup Docker image
        run: |
          docker rmi ghcr.io/${{ github.repository }}/my-ml-image:latest

    
