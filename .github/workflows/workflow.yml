name: CI Workflow

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
         python-version: '3.8'

      - name: Install virtualenv
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv

      - name: Set up virtual environment
        run: |
          python -m venv venv  # Create a virtual environment
          source venv/bin/activate  # Activate the virtual environment

      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
         path: ~/.cache/pip
         key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}  # Modify this to change the cache key
         restore-keys: |
          ${{ runner.os }}-python-

      # Install Python dependencies in virtual environment
      - name: Install Packages in Virtualenv
        run: |
          source venv/bin/activate  # Activate the virtual environment
          pip install -r requirements.txt  # Install project dependencies
          pip install black flake8 mlflow  # Install linters, formatters, and MLflow

      # Lint code using flake8 and allow errors without stopping the workflow
      - name: Lint code with flake8
        run: |
          source venv/bin/activate  # Activate the virtual environment
          flake8 . || true  # Lint all Python files, but don't stop the workflow if errors are found

      # Format code using black
      - name: Format code with black
        run: |
          source venv/bin/activate  # Activate the virtual environment
          black --check .  # Check if the code is formatted, will fail if not
        continue-on-error: true  # Allow the workflow to continue even if the check fails

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build --no-cache -t ghcr.io/${{ github.repository }}/my-ml-image:latest .

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Tag Docker image
      - name: Tag Docker image
        run: |
          docker tag ghcr.io/${{ github.repository }}/my-ml-image:latest ghcr.io/${{ github.repository }}/my-ml-image:latest

      # Push Docker image to GHCR
      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository }}/my-ml-image:latest

      # Run Docker container
      - name: Run Docker container
        run: |
          docker run --name ml-container -d ghcr.io/${{ github.repository }}/my-ml-image:latest

      # Check if the Docker container is running
      - name: Check Docker container status
        run: |
          docker ps -a

      # Update dependencies inside Docker container
      - name: Update dependencies inside Docker container
        run: |
            docker exec ml-container pip cache purge
            docker exec ml-container pip uninstall -y numpy
            docker exec ml-container pip install --upgrade numpy
            docker exec ml-container pip install --upgrade --force-reinstall scikit-learn
            docker exec ml-container pip install --upgrade --force-reinstall skops

      # Test ML project inside Docker container
      - name: Test ML project in Docker container
        run: |
          docker exec ml-container python /app/train.py  # Or any other script you want to run that uses MLflow

      # Run the training script inside the Docker container
      - name: Run training script inside Docker container
        run: |
          docker exec ml-container python /app/train.py  # Adjust path as needed

      # Optional: Upload MLflow artifacts
      - name: Upload MLflow artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mlflow-logs
          path: /app/mlruns  # Adjust path as needed, assuming MLflow logs are stored here

      # Cleanup Docker container
      - name: Cleanup Docker container
        run: |
          docker stop ml-container
          docker rm ml-container

      # Optional: Cleanup Docker image if you want to save space
      - name: Cleanup Docker image
        run: |
          docker rmi ghcr.io/${{ github.repository }}/my-ml-image:latest
